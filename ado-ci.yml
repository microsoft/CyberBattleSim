# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python
#
# Adapted from the template available here https://github.com/microsoft/azure-pipelines-yaml/blob/master/templates/python-package.yml
trigger:
  - master

pool:
  vmImage: "ubuntu-latest"

strategy:
  matrix:
    Python38:
      python.version: "3.8"

steps:
  - checkout: self
    submodules: false # does not work event though it's supposed to (authentication issue)
    persistCredentials: false

  - task: UsePythonVersion@0
    name: pythonver
    inputs:
      versionSpec: "$(python.version)"
    displayName: "Use Python $(python.version)"

  - task: NodeTool@0
    inputs:
      versionSpec: "12.x"
      #checkLatest: false # Optional
    displayName: "Use node tools"

  - script: |
      cat apt-requirements.txt | xargs sudo apt install
    displayName: "Install apt dependencies"

  - script: |
      python -m pip install flake8==5.0.1
    displayName: "Lint with flake8"

  - task: Cache@2
    displayName: "Pull pip packages from cache"
    inputs:
      key: 'pip | "$(Agent.OS)" | requirements.txt | requirements.dev.txt | setup.py'
      restoreKeys: |
        pip | "$(Agent.OS)"
      path: $(pythonver.pythonLocation)/lib/python3.8/site-packages

  - script: |
      ./install-pythonpackages.sh
    displayName: "Pull pip dependencies"

  - script: |
      ./pyright.sh --version
    displayName: "Install pyright"

  - task: Cache@2
    displayName: "Pull typing stubs from cache"
    inputs:
      key: 'typingstubs | "$(Agent.OS)" | createstubs.sh'
      restoreKeys: |
        typingstubs | "$(Agent.OS)" | createstubs.sh
      path: typings/

  - script: |
      ./createstubs.sh
    displayName: "create type stubs"

  - script: |
      ./pyright.sh
    displayName: "Typecheck with pyright"

  - script: |
      pip install pytest-azurepipelines
      python -m pytest -v cyberbattle
    displayName: "Test with pytest"
